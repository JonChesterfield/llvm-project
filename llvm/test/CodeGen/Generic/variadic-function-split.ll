; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple=amdgcn-- -expand-va-intrinsics -S < %s | FileCheck %s
; RUN: opt -mtriple=i686-- -expand-va-intrinsics -S < %s | FileCheck %s
; RUN: opt -mtriple=x86_64-- -expand-va-intrinsics -S < %s | FileCheck %s

; Not going to be generic any more

target datalayout = "e-m:e-S8"

; CHECK: fail-me

define dso_local i32 @variadic_to_call_middle(double %d, ...) {
entry:
  %va = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %va)
  call void @llvm.va_start(ptr nonnull %va)
  %0 = va_arg ptr %va, i32
  %1 = va_arg ptr %va, double
  %2 = va_arg ptr %va, i32
  call void @llvm.va_end(ptr %va)
  call void @_Z3erri(i32 %0)
  call void @_Z3errd(double %1)
  call void @_Z3erri(i32 %2)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %va)
  ret i32 0
}


define i32 @variadic_to_call_entry(i32 %x0, double %x1, i32 %x2) {
  %ret = tail call i32 (double, ...) @variadic_to_call_middle(double 1.0, i32 %x0, double %x1, i32 %x2)
  ret i32 %ret
}


declare void @llvm.va_start(ptr)
declare void @llvm.va_end(ptr)

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture)

declare void @_Z3erri(i32)
declare void @_Z3errd(double)
