; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S --expand-va-intrinsics < %s | FileCheck %s
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

%struct.libcS = type { i8, i16, i32, i64, float, double }

define dso_local void @codegen_for_copy(ptr noundef %x) local_unnamed_addr #0 {
; CHECK-LABEL: @codegen_for_copy(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[CP:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[X:%.*]], ptr [[X_ADDR]], align 8, !tbaa [[TBAA2:![0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[CP]]) #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr [[CP]], ptr [[X_ADDR]], i32 8, i1 false)
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[CP]], align 8, !tbaa [[TBAA2]]
; CHECK-NEXT:    call void @wrapped(ptr noundef [[TMP0]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[CP]]) #[[ATTR5]]
; CHECK-NEXT:    ret void
;
entry:
  %x.addr = alloca ptr, align 8
  %cp = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8, !tbaa !3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %cp) #4
  call void @llvm.va_copy(ptr nonnull %cp, ptr nonnull %x.addr)
  %0 = load ptr, ptr %cp, align 8, !tbaa !3
  call void @wrapped(ptr noundef %0) #5
  call void @llvm.va_end(ptr %cp)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %cp) #4
  ret void
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare void @llvm.va_copy(ptr, ptr) #2

declare dso_local void @wrapped(ptr noundef) local_unnamed_addr #3

declare void @llvm.va_end(ptr) #2

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

define dso_local void @single_i32(i32 noundef %x) local_unnamed_addr #0 {
; CHECK-LABEL: @single_i32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_7:%.*]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_7]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR7:[0-9]+]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x) #6
  ret void
}

define internal void @vararg(...) unnamed_addr #0 {
; CHECK-LABEL: @vararg(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VA:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[VA]]) #[[ATTR5]]
; CHECK-NEXT:    call void @llvm.va_start(ptr nonnull [[VA]])
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[VA]], align 8, !tbaa [[TBAA2]]
; CHECK-NEXT:    call void @wrapped(ptr noundef [[TMP0]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[VA]]) #[[ATTR5]]
; CHECK-NEXT:    ret void
;
entry:
  %va = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %va) #4
  call void @llvm.va_start(ptr nonnull %va)
  %0 = load ptr, ptr %va, align 8, !tbaa !3
  call void @wrapped(ptr noundef %0) #5
  call void @llvm.va_end(ptr %va)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %va) #4
  ret void
}

define dso_local void @single_double(double noundef %x) local_unnamed_addr #0 {
; CHECK-LABEL: @single_double(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_6:%.*]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_6]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store double [[X:%.*]], ptr [[TMP0]], align 8
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR7]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x) #6
  ret void
}

define dso_local void @single_float4(<4 x float> noundef %x) local_unnamed_addr #0 {
; CHECK-LABEL: @single_float4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_5:%.*]], align 16
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_5]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store <4 x float> [[X:%.*]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR7]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> noundef %x) #6
  ret void
}

define dso_local void @i32_double(i32 noundef %x, double noundef %y) local_unnamed_addr #0 {
; CHECK-LABEL: @i32_double(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_4:%.*]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_4]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_4]], ptr [[VARARG_BUFFER]], i32 0, i32 2
; CHECK-NEXT:    store double [[Y:%.*]], ptr [[TMP1]], align 8
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR7]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, double noundef %y) #6
  ret void
}

define dso_local void @double_i32(double noundef %x, i32 noundef %y) local_unnamed_addr #0 {
; CHECK-LABEL: @double_i32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_3:%.*]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_3]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store double [[X:%.*]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_3]], ptr [[VARARG_BUFFER]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[Y:%.*]], ptr [[TMP1]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR7]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x, i32 noundef %y) #6
  ret void
}

define dso_local void @i32_float4(i32 noundef %x, <4 x float> noundef %y) local_unnamed_addr #0 {
; CHECK-LABEL: @i32_float4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_2:%.*]], align 16
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_2]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_2]], ptr [[VARARG_BUFFER]], i32 0, i32 2
; CHECK-NEXT:    store <4 x float> [[Y:%.*]], ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR7]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <4 x float> noundef %y) #6
  ret void
}

define dso_local void @float4_i32(<4 x float> noundef %x, i32 noundef %y) local_unnamed_addr #0 {
; CHECK-LABEL: @float4_i32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_1:%.*]], align 16
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_1]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store <4 x float> [[X:%.*]], ptr [[TMP0]], align 16
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_1]], ptr [[VARARG_BUFFER]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[Y:%.*]], ptr [[TMP1]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR7]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> noundef %x, i32 noundef %y) #6
  ret void
}

define dso_local void @i32_libcS(i32 noundef %x, ptr noundef byval(%struct.libcS) align 8 %y) local_unnamed_addr #0 {
; CHECK-LABEL: @i32_libcS(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_0:%.*]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_0]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_0]], ptr [[VARARG_BUFFER]], i32 0, i32 2
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr [[TMP1]], ptr [[Y:%.*]], i64 32, i1 false)
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR7]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, ptr noundef nonnull byval(%struct.libcS) align 8 %y) #6
  ret void
}

define dso_local void @libcS_i32(ptr noundef byval(%struct.libcS) align 8 %x, i32 noundef %y) local_unnamed_addr #0 {
; CHECK-LABEL: @libcS_i32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG:%.*]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr [[TMP0]], ptr [[X:%.*]], i64 32, i1 false)
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG]], ptr [[VARARG_BUFFER]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[Y:%.*]], ptr [[TMP1]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR7]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(ptr noundef nonnull byval(%struct.libcS) align 8 %x, i32 noundef %y) #6
  ret void
}

declare void @llvm.va_start(ptr) #2

attributes #0 = { nounwind "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="sm_52" "target-features"="+ptx42,+sm_52" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="sm_52" "target-features"="+ptx42,+sm_52" }
attributes #4 = { nounwind }
attributes #5 = { nobuiltin nounwind "no-builtins" }
attributes #6 = { nobuiltin "no-builtins" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
