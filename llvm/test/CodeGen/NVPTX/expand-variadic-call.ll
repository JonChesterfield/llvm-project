; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --function-signature
; RUN: opt -S --passes=expand-variadics < %s | FileCheck %s
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

; Check the variables are lowered to the locations this target expects

; The types show the call frames

%struct.libcS = type { i8, i16, i32, i64, float, double }

@vararg_ptr = global ptr @vararg, align 8

define void @codegen_for_copy(ptr noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@codegen_for_copy(ptr noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %x.addr = alloca ptr, align 8
; CHECK-NEXT:    %cp = alloca ptr, align 8
; CHECK-NEXT:    store ptr %x, ptr %x.addr, align 8, !tbaa !2
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %cp) #3
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr %cp, ptr %x.addr, i32 8, i1 false)
; CHECK-NEXT:    %0 = load ptr, ptr %cp, align 8, !tbaa !2
; CHECK-NEXT:    call void @wrapped(ptr noundef %0) #3
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %cp) #3
; CHECK-NEXT:    ret void
;
entry:
  %x.addr = alloca ptr, align 8
  %cp = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8, !tbaa !3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %cp) #2
  call void @llvm.va_copy(ptr nonnull %cp, ptr nonnull %x.addr)
  %0 = load ptr, ptr %cp, align 8, !tbaa !3
  call void @wrapped(ptr noundef %0) #2
  call void @llvm.va_end(ptr %cp)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %cp) #2
  ret void
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #0

declare void @llvm.va_copy(ptr, ptr) #1

declare void @wrapped(ptr noundef)

declare void @llvm.va_end(ptr) #1

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #0

define void @vararg(...) {
; CHECK-LABEL: define {{[^@]+}}@vararg(...) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %va = alloca ptr, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %va) #3
; CHECK-NEXT:    call void @llvm.va_start(ptr nonnull %va)
; CHECK-NEXT:    %0 = load ptr, ptr %va, align 8, !tbaa !2
; CHECK-NEXT:    call void @wrapped(ptr noundef %0) #3
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %va) #3
; CHECK-NEXT:    ret void
;
entry:
  %va = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %va) #2
  call void @llvm.va_start(ptr nonnull %va)
  %0 = load ptr, ptr %va, align 8, !tbaa !3
  call void @wrapped(ptr noundef %0) #2
  call void @llvm.va_end(ptr %va)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %va) #2
  ret void
}

declare void @llvm.va_start(ptr) #1

define void @single_i32(i32 noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_i32(i32 noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(i32 noundef %x) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x) #2
  ret void
}

define void @single_double(double noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_double(double noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(double noundef %x) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x) #2
  ret void
}

define void @single_v4f32(<4 x float> noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_v4f32(<4 x float> noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(<4 x float> noundef %x) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> noundef %x) #2
  ret void
}

define void @single_v8f32(<8 x float> noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_v8f32(<8 x float> noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(<8 x float> noundef %x) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<8 x float> noundef %x) #2
  ret void
}

define void @single_v16f32(<16 x float> noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_v16f32(<16 x float> noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(<16 x float> noundef %x) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<16 x float> noundef %x) #2
  ret void
}

define void @single_v32f32(<32 x float> noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@single_v32f32(<32 x float> noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(<32 x float> noundef %x) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<32 x float> noundef %x) #2
  ret void
}

define void @i32_double(i32 noundef %x, double noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_double(i32 noundef %x, double noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(i32 noundef %x, double noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, double noundef %y) #2
  ret void
}

define void @double_i32(double noundef %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@double_i32(double noundef %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(double noundef %x, i32 noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x, i32 noundef %y) #2
  ret void
}

define void @i32_libcS(i32 noundef %x, ptr noundef byval(%struct.libcS) align 8 %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_libcS(i32 noundef %x, ptr noundef byval(%struct.libcS) align 8 %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(i32 noundef %x, ptr noundef nonnull byval(%struct.libcS) align 8 %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, ptr noundef nonnull byval(%struct.libcS) align 8 %y) #2
  ret void
}

define void @libcS_i32(ptr noundef byval(%struct.libcS) align 8 %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@libcS_i32(ptr noundef byval(%struct.libcS) align 8 %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(ptr noundef nonnull byval(%struct.libcS) align 8 %x, i32 noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(ptr noundef nonnull byval(%struct.libcS) align 8 %x, i32 noundef %y) #2
  ret void
}

define void @i32_v4f32(i32 noundef %x, <4 x float> noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_v4f32(i32 noundef %x, <4 x float> noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(i32 noundef %x, <4 x float> noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <4 x float> noundef %y) #2
  ret void
}

define void @v4f32_i32(<4 x float> noundef %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@v4f32_i32(<4 x float> noundef %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(<4 x float> noundef %x, i32 noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> noundef %x, i32 noundef %y) #2
  ret void
}

define void @i32_v8f32(i32 noundef %x, <8 x float> noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_v8f32(i32 noundef %x, <8 x float> noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(i32 noundef %x, <8 x float> noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <8 x float> noundef %y) #2
  ret void
}

define void @v8f32_i32(<8 x float> noundef %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@v8f32_i32(<8 x float> noundef %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(<8 x float> noundef %x, i32 noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<8 x float> noundef %x, i32 noundef %y) #2
  ret void
}

define void @i32_v16f32(i32 noundef %x, <16 x float> noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_v16f32(i32 noundef %x, <16 x float> noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(i32 noundef %x, <16 x float> noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <16 x float> noundef %y) #2
  ret void
}

define void @v16f32_i32(<16 x float> noundef %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@v16f32_i32(<16 x float> noundef %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(<16 x float> noundef %x, i32 noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<16 x float> noundef %x, i32 noundef %y) #2
  ret void
}

define void @i32_v32f32(i32 noundef %x, <32 x float> noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@i32_v32f32(i32 noundef %x, <32 x float> noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(i32 noundef %x, <32 x float> noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <32 x float> noundef %y) #2
  ret void
}

define void @v32f32_i32(<32 x float> noundef %x, i32 noundef %y) {
; CHECK-LABEL: define {{[^@]+}}@v32f32_i32(<32 x float> noundef %x, i32 noundef %y) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void (...) @vararg(<32 x float> noundef %x, i32 noundef %y) #3
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<32 x float> noundef %x, i32 noundef %y) #2
  ret void
}

define void @indirect_single_i32(i32 noundef %x) {
; CHECK-LABEL: define {{[^@]+}}@indirect_single_i32(i32 noundef %x) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %0 = load volatile ptr, ptr @vararg_ptr, align 8, !tbaa !2
; CHECK-NEXT:    tail call void (...) %0(i32 noundef %x) #3
; CHECK-NEXT:    ret void
;
entry:
  %0 = load volatile ptr, ptr @vararg_ptr, align 8, !tbaa !3
  tail call void (...) %0(i32 noundef %x) #2
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
attributes #2 = { mustprogress }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
