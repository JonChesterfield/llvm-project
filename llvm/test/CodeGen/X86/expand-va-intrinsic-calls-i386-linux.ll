; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S --expand-va-intrinsics < %s | FileCheck %s
target datalayout = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i128:128-f64:32:64-f80:32-n8:16:32-S128"
target triple = "i386-unknown-linux-gnu"

%struct.libcS = type { i8, i16, i32, i32, float, double }

define dso_local void @codegen_for_copy(ptr noundef %x) local_unnamed_addr #0 {
; CHECK-LABEL: @codegen_for_copy(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X_ADDR:%.*]] = alloca ptr, align 4
; CHECK-NEXT:    [[CP:%.*]] = alloca ptr, align 4
; CHECK-NEXT:    store ptr [[X:%.*]], ptr [[X_ADDR]], align 4, !tbaa [[TBAA4:![0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull [[CP]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    call void @llvm.memcpy.inline.p0.p0.i32(ptr [[CP]], ptr [[X_ADDR]], i32 4, i1 false)
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[CP]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    call void @wrapped(ptr noundef [[TMP0]]) #[[ATTR7:[0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull [[CP]]) #[[ATTR6]]
; CHECK-NEXT:    ret void
;
entry:
  %x.addr = alloca ptr, align 4
  %cp = alloca ptr, align 4
  store ptr %x, ptr %x.addr, align 4, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %cp) #5
  call void @llvm.va_copy(ptr nonnull %cp, ptr nonnull %x.addr)
  %0 = load ptr, ptr %cp, align 4, !tbaa !5
  call void @wrapped(ptr noundef %0) #6
  call void @llvm.va_end(ptr %cp)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %cp) #5
  ret void
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare void @llvm.va_copy(ptr, ptr) #2

declare void @wrapped(ptr noundef) local_unnamed_addr #3

declare void @llvm.va_end(ptr) #2

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

define dso_local void @single_i32(i32 noundef %x) local_unnamed_addr #0 {
; CHECK-LABEL: @single_i32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_7:%.*]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_7]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR8:[0-9]+]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x) #7
  ret void
}

define internal void @vararg(...) unnamed_addr #0 {
; CHECK-LABEL: @vararg(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VA:%.*]] = alloca ptr, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull [[VA]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.va_start(ptr nonnull [[VA]])
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[VA]], align 4, !tbaa [[TBAA4]]
; CHECK-NEXT:    call void @wrapped(ptr noundef [[TMP0]]) #[[ATTR7]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull [[VA]]) #[[ATTR6]]
; CHECK-NEXT:    ret void
;
entry:
  %va = alloca ptr, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %va) #5
  call void @llvm.va_start(ptr nonnull %va)
  %0 = load ptr, ptr %va, align 4, !tbaa !5
  call void @wrapped(ptr noundef %0) #6
  call void @llvm.va_end(ptr %va)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %va) #5
  ret void
}

define dso_local void @single_double(double noundef %x) local_unnamed_addr #0 {
; CHECK-LABEL: @single_double(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_6:%.*]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_6]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store double [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x) #7
  ret void
}

define dso_local void @single_float4(<4 x float> noundef %x) local_unnamed_addr #4 {
; CHECK-LABEL: @single_float4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_5:%.*]], align 16
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_5]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store <4 x float> [[X:%.*]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> noundef %x) #7
  ret void
}

define dso_local void @i32_double(i32 noundef %x, double noundef %y) local_unnamed_addr #0 {
; CHECK-LABEL: @i32_double(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_4:%.*]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_4]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_4]], ptr [[VARARG_BUFFER]], i32 0, i32 1
; CHECK-NEXT:    store double [[Y:%.*]], ptr [[TMP1]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, double noundef %y) #7
  ret void
}

define dso_local void @double_i32(double noundef %x, i32 noundef %y) local_unnamed_addr #0 {
; CHECK-LABEL: @double_i32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_3:%.*]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_3]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store double [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_3]], ptr [[VARARG_BUFFER]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[Y:%.*]], ptr [[TMP1]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(double noundef %x, i32 noundef %y) #7
  ret void
}

define dso_local void @i32_float4(i32 noundef %x, <4 x float> noundef %y) local_unnamed_addr #4 {
; CHECK-LABEL: @i32_float4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_2:%.*]], align 16
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_2]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_2]], ptr [[VARARG_BUFFER]], i32 0, i32 2
; CHECK-NEXT:    store <4 x float> [[Y:%.*]], ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, <4 x float> noundef %y) #7
  ret void
}

define dso_local void @float4_i32(<4 x float> noundef %x, i32 noundef %y) local_unnamed_addr #4 {
; CHECK-LABEL: @float4_i32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_1:%.*]], align 16
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_1]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store <4 x float> [[X:%.*]], ptr [[TMP0]], align 16
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_1]], ptr [[VARARG_BUFFER]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[Y:%.*]], ptr [[TMP1]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(<4 x float> noundef %x, i32 noundef %y) #7
  ret void
}

define dso_local void @i32_libcS(i32 noundef %x, ptr noundef byval(%struct.libcS) align 4 %y) local_unnamed_addr #0 {
; CHECK-LABEL: @i32_libcS(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG_0:%.*]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_0]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[X:%.*]], ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG_0]], ptr [[VARARG_BUFFER]], i32 0, i32 1
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr [[TMP1]], ptr [[Y:%.*]], i64 24, i1 false)
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(i32 noundef %x, ptr noundef nonnull byval(%struct.libcS) align 4 %y) #7
  ret void
}

define dso_local void @libcS_i32(ptr noundef byval(%struct.libcS) align 4 %x, i32 noundef %y) local_unnamed_addr #0 {
; CHECK-LABEL: @libcS_i32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VARARG_BUFFER:%.*]] = alloca [[WRAPPED_VARARG:%.*]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[WRAPPED_VARARG]], ptr [[VARARG_BUFFER]], i32 0, i32 0
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr [[TMP0]], ptr [[X:%.*]], i64 24, i1 false)
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[WRAPPED_VARARG]], ptr [[VARARG_BUFFER]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[Y:%.*]], ptr [[TMP1]], align 4
; CHECK-NEXT:    call void @wrapped(ptr [[VARARG_BUFFER]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  tail call void (...) @vararg(ptr noundef nonnull byval(%struct.libcS) align 4 %x, i32 noundef %y) #7
  ret void
}

declare void @llvm.va_start(ptr) #2

attributes #0 = { nounwind "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "min-legal-vector-width"="128" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }
attributes #6 = { nobuiltin nounwind "no-builtins" }
attributes #7 = { nobuiltin "no-builtins" }

!llvm.module.flags = !{!0, !1, !2, !3}

!0 = !{i32 1, !"NumRegisterParameters", i32 0}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
